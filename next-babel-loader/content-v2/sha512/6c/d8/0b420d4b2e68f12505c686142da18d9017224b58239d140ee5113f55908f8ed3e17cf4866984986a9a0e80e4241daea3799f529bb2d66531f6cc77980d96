{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/francescogreco/Dropbox/Lavoro/Craon/Sito_nuovo/craonsite-main/components/info-number-text/InfoNumberText.js\",\n    _this = this;\n\nimport React from \"react\";\nimport classes from \"./InfoNumberText.module.scss\";\nimport PropTypes from \"prop-types\";\n\nvar InfoNumberText = function InfoNumberText(_ref) {\n  var number = _ref.number,\n      text = _ref.text;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: classes.infoNumber,\n      children: number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.infoText,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = InfoNumberText;\nInfoNumberText.propTypes = {\n  number: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired\n};\nexport default InfoNumberText;\n\nfunction animateValue(obj, start, end, duration) {\n  var startTimestamp = null;\n\n  var step = function step(timestamp) {\n    if (!startTimestamp) startTimestamp = timestamp;\n    var progress = Math.min((timestamp - startTimestamp) / duration, 1);\n    obj.innerHTML = Math.floor(progress * (end - start) + start);\n\n    if (progress < 1) {\n      window.requestAnimationFrame(step);\n    }\n  };\n\n  window.requestAnimationFrame(step);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoNumberText\");","map":{"version":3,"sources":["/Users/francescogreco/Dropbox/Lavoro/Craon/Sito_nuovo/craonsite-main/components/info-number-text/InfoNumberText.js"],"names":["React","classes","PropTypes","InfoNumberText","number","text","container","infoNumber","infoText","propTypes","string","isRequired","animateValue","obj","start","end","duration","startTimestamp","step","timestamp","progress","Math","min","innerHTML","floor","window","requestAnimationFrame"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAoB;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACvC,sBACI;AAAO,IAAA,SAAS,EAAEJ,OAAO,CAACK,SAA1B;AAAA,4BACI;AAAI,MAAA,SAAS,EAAEL,OAAO,CAACM,UAAvB;AAAA,gBACCH;AADD;AAAA;AAAA;AAAA;AAAA,aADJ,eAII;AAAM,MAAA,SAAS,EAAEH,OAAO,CAACO,QAAzB;AAAA,gBAAoCH;AAApC;AAAA;AAAA;AAAA;AAAA,aAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AASH,CAVD;;KAAMF,c;AAYNA,cAAc,CAACM,SAAf,GAA2B;AACvBL,EAAAA,MAAM,EAAEF,SAAS,CAACQ,MAAV,CAAiBC,UADF;AAEvBN,EAAAA,IAAI,EAAEH,SAAS,CAACQ,MAAV,CAAiBC;AAFA,CAA3B;AAKA,eAAeR,cAAf;;AAGA,SAASS,YAAT,CAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,GAAlC,EAAuCC,QAAvC,EAAiD;AAC7C,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,SAAD,EAAe;AAC1B,QAAI,CAACF,cAAL,EAAqBA,cAAc,GAAGE,SAAjB;AACrB,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACH,SAAS,GAAGF,cAAb,IAA+BD,QAAxC,EAAkD,CAAlD,CAAjB;AACAH,IAAAA,GAAG,CAACU,SAAJ,GAAgBF,IAAI,CAACG,KAAL,CAAWJ,QAAQ,IAAIL,GAAG,GAAGD,KAAV,CAAR,GAA2BA,KAAtC,CAAhB;;AACA,QAAIM,QAAQ,GAAG,CAAf,EAAkB;AAChBK,MAAAA,MAAM,CAACC,qBAAP,CAA6BR,IAA7B;AACD;AACF,GAPD;;AAQAO,EAAAA,MAAM,CAACC,qBAAP,CAA6BR,IAA7B;AACD","sourcesContent":["import React from \"react\";\nimport classes from \"./InfoNumberText.module.scss\"\nimport PropTypes from \"prop-types\";\n\n\nconst InfoNumberText = ({number, text}) => {\n    return(\n        <div   className={classes.container}>            \n            <h3 className={classes.infoNumber}>\n            {number}\n            </h3>\n            <div  className={classes.infoText}>{text}\n            </div>      \n        </div>\n    );\n}\n \nInfoNumberText.propTypes = {\n    number: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,  \n};\n\nexport default InfoNumberText;\n\n\nfunction animateValue(obj, start, end, duration) {\n    let startTimestamp = null;\n    const step = (timestamp) => {\n      if (!startTimestamp) startTimestamp = timestamp;\n      const progress = Math.min((timestamp - startTimestamp) / duration, 1);\n      obj.innerHTML = Math.floor(progress * (end - start) + start);\n      if (progress < 1) {\n        window.requestAnimationFrame(step);\n      }\n    };\n    window.requestAnimationFrame(step);\n  }"]},"metadata":{},"sourceType":"module"}