{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\n\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = globalThis.window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const {\n    0: windowDimensions,\n    1: setWindowDimensions\n  } = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}","map":{"version":3,"sources":["/Users/francescogreco/Dropbox/Lavoro/Craon/Sito_nuovo/craonsite-main/components/hooks/windowDimension.js"],"names":["useState","useEffect","dynamic","getWindowDimensions","innerWidth","width","innerHeight","height","globalThis","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,cAApB;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,UAAU,CAACC,MAA9D;AACA,SAAO;AACLJ,IAAAA,KADK;AAELE,IAAAA;AAFK,GAAP;AAID;;AAED,eAAe,SAASG,mBAAT,GAA+B;AAC5C,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CZ,QAAQ,CAACG,mBAAmB,EAApB,CAAxD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,aAASY,YAAT,GAAwB;AACtBD,MAAAA,mBAAmB,CAACT,mBAAmB,EAApB,CAAnB;AACD;;AAEDM,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,gBAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = globalThis.window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}"]},"metadata":{},"sourceType":"module"}